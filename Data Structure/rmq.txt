class SEGTREE
{
public:
	int n;
	vector <int> tree;

	SEGTREE(const vector <int> & vi)
	{
		n = vi.size();
		tree.resize(4 * n);
		init(vi, 0, n - 1, 1);
	}

	int init(const vector <int> & vi, const int left, const int right, const int node)
	{
		if (left == right) return tree[node] = vi[left];
		const int mid = (left + right) / 2;
		return tree[node] = init(vi, left, mid, node * 2) + init(vi, mid + 1, right, node * 2 + 1);
	}

	int query(const int & a, const int & b)
	{
		return query(a, b, 1, 0, n - 1);
	}

	int update(const int & idx, const int & val)
	{
		return update(idx, val, 1, 0, n - 1);
	}

private:
	int query(const int & a, const int & b, const int node, const int & nodeleft, const int & noderight)
	{
		if (b < nodeleft || noderight < a) return 0;
		if (a <= nodeleft && noderight <= b) return tree[node];
		const int mid = (nodeleft + noderight) / 2;
		return query(a, b, node * 2, nodeleft, mid) + query(a, b, node * 2 + 1, mid + 1, noderight);
	}

	int update(const int & idx, const int & val, const int node, const int & nodeleft, const int & noderight)
	{
		if (idx < nodeleft || noderight < idx) return tree[node];
		if (nodeleft == noderight) return tree[node] = val;
		const int mid = (nodeleft + noderight) / 2;
		return tree[node] = update(idx, val, node * 2, nodeleft, mid) + update(idx, val, node * 2 + 1, mid + 1, noderight);
	}
};