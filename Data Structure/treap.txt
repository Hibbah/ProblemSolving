template <typename T>
class Treap
{
public:
	class Node
	{
	public:
		T item; // key
		int priority, n; // n == 서브트리의 크기
		Node *left, *right;

		Node() {}
		Node(const T & _item)
		{
			item = _item;
			priority = rand();
			n = 1; // 처음엔 root 하나
			left = right = NULL;
		}

		bool operator < (const T & p) const { return item < p.item; }
		bool operator == (const T & p) const{ return item == p.item; }

		inline void calcSize() { n = 1 + (left ? left->n : 0) + (right ? right->n : 0); }
		inline void setRight(Node* r) { right = r; calcSize(); }
		inline void setLeft(Node* l) { left = l; calcSize(); }
	};
	typedef pair<Node*, Node*> NodePair;

	Node * root;

	Treap() : root(NULL) {}
	~Treap() { removeTree(root); }
	inline int size() { return root->n; }

	// item을 삽입하고 삽입한 노드의 위치 반환
	Node * insert(const T & item)
	{
		Node * newnode = new Node(item);
		root = insert(root, newnode);
		return newnode;
	}

	// 서브트리 root에서 key == target인 노드 탐색
	Node* find(Node * root, const T & target)
	{
		if (root == NULL) return NULL;
		if (root->item == target) return root;
		if (root->item < target) return find(root->right, target);
		return find(root->left, target);
	}

	// key == target인 노드 제거
	void erase(const T & target) { root = erase(root, target); }
	// n번째 노드 반환
	T nth(const int n) { return nth(root, n)->item; }
	// key값이 x보다 작은 원소의 수 반환
	int Cntlessthan(const T & x) { return Cntlessthan(root, x); }
	// key값이 x보다 큰 원소의 수 반환
	int Cntgreaterthan(const T & x) { return Cntgreaterthan(root, x); }

private:
	void removeTree(const Node * root)
	{
		if (root == NULL) return;
		removeTree(root->left);
		removeTree(root->right);
		delete root;
	}

	NodePair splitNode(Node* root, const T & k)
	{
		if (root == NULL) return NodePair(NULL, NULL);

		if (root->item < k)
		{
			NodePair rr = splitNode(root->right, k);
			root->setRight(rr.first);
			return NodePair(root, rr.second);
		}
		// case (v < root->key)
		NodePair rl = splitNode(root->left, k);
		root->setLeft(rl.second);
		return NodePair(rl.first, root);
	}

	Node* merge(Node* a, Node* b)
	{
		if (a == NULL) return b;
		if (b == NULL) return a;

		if (a->priority < b->priority)
		{
			b->setLeft(merge(a, b->left));
			return b;
		}
		a->setRight(merge(a->right, b));
		return a;
	}

	Node* insert(Node* root, Node* node)
	{
		if (root == NULL) return node;

		if (root->priority < node->priority)
		{
			NodePair rootsplit = splitNode(root, node->item);
			node->setLeft(rootsplit.first);
			node->setRight(rootsplit.second);
			return node;
		}
		if (root->item < node->item) root->setRight(insert(root->right, node));
		else root->setLeft(insert(root->left, node));
		return root;
	}

	Node* erase(Node* root, const T & target)
	{
		if (root == NULL) return root;

		if (root->item == target)
		{
			Node* ret = merge(root->left, root->right);
			delete root;
			return ret;
		}
		if (root->item < target) root->setRight(erase(root->right, target));
		else root->setLeft(erase(root->left, target));
		return root;
	}

	int Cntlessthan(Node* root, const T & x)
	{
		if (root == NULL) return 0;

		if (root->item == x)// return root->left ? root->left->n : 0;
		{
			if (root->left == NULL) return 0;

			Node * node = find(root->left, x);
			if (node == NULL) return root->left->n;
			return Cntlessthan(root->left, x);
		}
		if (root->item < x) return (root->left ? root->left->n : 0) + 1 + Cntlessthan(root->right, x);
		return Cntlessthan(root->left, x); // x < root->key
	}

	int Cntgreaterthan(Node* root, const T & x)
	{
		if (root == NULL) return 0;

		if (root->item == x)// return root->right ? root->right->n : 0;
		{
			if (root->right == NULL) return 0;
			Node * node = find(root->right, x);
			if (node == NULL) return root->right->n;
			return Cntgreaterthan(root->right, x);
		}
		if (root->item < x) return Cntgreaterthan(root->right, x);
		return (root->right ? root->right->n : 0) + 1 + Cntgreaterthan(root->left, x); // x < root->key
	}

	Node* nth(Node* root, const int n)
	{
		if (root == NULL) return NULL;
		int leftSize = root->left ? root->left->n : 0;
		if (leftSize + 1 == n) return root;
		if (n <= leftSize) return nth(root->left, n);
		return nth(root->right, n - leftSize - 1);
	}
};